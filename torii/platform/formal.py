# SPDX-License-Identifier: BSD-2-Clause

from typing       import Literal, Optional, Union

from ..build.plat import TemplatedPlatform
from ..build.run  import BuildPlan, BuildProducts
from ..hdl.ir     import Fragment, Elaboratable
from ..hdl.xfrm   import SampleLowerer, DomainLowerer

__all__ = (
	'FormalPlatform'
)



class FormalPlatform(TemplatedPlatform):
	'''

	'''

	toolchain = None

	_sby_required_tools = (
		'yosys-stmbmc',
		'yosys-abc',
		'sby',
		'yices'
	)

	_sby_file_templates = {
		**TemplatedPlatform.build_script_templates,
		'{{name}}.il': r'''
			# {{autogenerated}}
			{{emit_rtlil()}}
		''',
		'{{name}}.sby': r'''
			[options]
			{% if platform.mode == "bmc" %}
			mode bmc
			depth {{get_override("bmc_depth")|default("20")}}
			wait on
			multiclock on
			{% endif %}

			[engines]
			{% if platform.mode == "bmc" %}
			stmbmc {{get_override("solver")|default("yices2")}}
			{% endif %}

			[script]
			{% for file in platform.iter_files(".v") -%}
				read_verilog -formal {{file}}
			{% endfor %}
			{% for file in platform.iter_files(".sv") -%}
				read_verilog -formal -sv {{file}}
			{% endfor %}
			{% for file in platform.iter_files(".il") -%}
				read_rtlil {{file}}
			{% endfor %}
			read_rtlil {{name}}.il
			prep
			setattr -unset init w:* a:torii.sample_reg %d

			[files]
			{{name}}.il
			{% for file in platform.iter_files(".v") -%}
				{{file}}
			{% endfor %}
			{% for file in platform.iter_files(".sv") -%}
				{{file}}
			{% endfor %}
			{% for file in platform.iter_files(".il") -%}
				{{file}}
			{% endfor %}
		'''
	}

	_sby_command_templates = [
		r'''
		{{invoke_tool("sby")}}
			-f
			-j {{get_override("sby_jobs")|default("1")}}
			-d {{name}}_formal
		'''
	]

	def __init__(self, toolchain: Literal['sby'] = 'sby') -> None:
		super().__init__()

		if toolchain not in ('sby', ):
			raise ValueError(f'Toolchain must be sby, not {toolchain}')

		self.toolchain = toolchain

	@property
	def _toolchain_env_var(self) -> str:
		return super()._toolchain_env_var

	@property
	def required_tools(self) -> list[str]:
		if self.toolchain == 'sby':
			return self._sby_required_tools

	@property
	def file_templates(self) -> dict[str, str]:
		if self.toolchain == 'sby':
			return self._sby_file_templates

	@property
	def command_templates(self) -> list[str]:
		if self.toolchain == 'sby':
			return self._sby_command_templates

	def build(self, *args, **kwargs) -> Union[BuildPlan, BuildProducts, None]:
		self._build_dir = kwargs.get('build_dir', 'build')
		return super().build(*args, **kwargs, formal = True)
