# SPDX-License-Identifier: BSD-2-Clause

from abc             import abstractmethod
from collections.abc import Iterable
from typing          import Literal, TypedDict

from ....build       import Attrs, Clock, Subsignal, PinFeature, TemplatedPlatform
from ....hdl         import ClockDomain, ClockSignal, Const, Instance, Module, Record, Signal
from ....hdl.ast     import SignalSet
from ....lib.io      import Pin
from ....util        import flatten

__all__ = (
	'LatticePlatform',
)

_REQUIRED_TOOLS_COMMON = [
	'yosys',
]

_TRELLIS_REQUIRED_TOOLS_COMMON = [
	*_REQUIRED_TOOLS_COMMON,
	'ecppack'
]

_TRELLIS_REQUIRED_TOOLS_ECP5 = [
	*_TRELLIS_REQUIRED_TOOLS_COMMON,
	'nextpnr-ecp5'
]

_TRELLIS_REQUIRED_TOOLS_MACHXO = [
	*_TRELLIS_REQUIRED_TOOLS_COMMON,
	'nextpnr-machxo2'
]

_OXIDE_REQUIRED_TOOLS = [
	*_REQUIRED_TOOLS_COMMON,
	'nextpnr-nexus',
	'prjoxide'
]

_DIAMOND_REQUIRED_TOOLS = [
	'diamondc',
	'ddtcmd',
]

_RADIANT_REQUIRED_TOOLS = [
	'radiantc',
]

_FILE_TEMPLATES_COMMON = {
	'{{name}}.v': r'''
		/* {{autogenerated}} */
		{{emit_verilog()}}
	''',
	'{{name}}.debug.v': r'''
		/* {{autogenerated}} */
		{{emit_debug_verilog()}}
	''',
}

_TRELLIS_FILE_TEMPLATES = {
	**TemplatedPlatform.build_script_templates,
	**_FILE_TEMPLATES_COMMON,
	'{{name}}.il': r'''
		# {{autogenerated}}
		{{emit_rtlil()}}
	''',
}

_OXIDE_FILE_TEMPLATES = {
	**TemplatedPlatform.build_script_templates,
	**_FILE_TEMPLATES_COMMON,
	'{{name}}.il': r'''
		# {{autogenerated}}
		{{emit_rtlil()}}
	''',
}

_DIAMOND_FILE_TEMPLATES_COMMON = {
	**TemplatedPlatform.build_script_templates,
	'build_{{name}}.sh': r'''
		#!/bin/bash
		# {{autogenerated}}
		set -e{{verbose("x")}}
		if [ -z "$BASH" ] ; then exec /bin/bash "$0" "$@"; fi
		if [ -n "${{platform._toolchain_env_var}}" ]; then
			bindir=$(dirname "${{platform._toolchain_env_var}}")
			. "${{platform._toolchain_env_var}}"
		fi
		{{emit_commands("sh")}}
	''',
	**_FILE_TEMPLATES_COMMON,
	'{{name}}.tcl': r'''
		prj_project new -name {{name}} -impl impl -impl_dir {{name}}_impl \
			-dev {{platform.device}}-{{platform.speed}}{{platform.package}}{{platform.grade}} \
			-lpf {{name}}.lpf \
			-synthesis synplify
		{% for file in platform.iter_files(".v", ".sv", ".vhd", ".vhdl") -%}
			prj_src add {{file|tcl_escape}}
		{% endfor %}
		prj_src add {{name}}.v
		prj_impl option top {{name}}
		prj_src add {{name}}.sdc
		{{get_override("script_project")|default("# (script_project placeholder)")}}
		prj_project save
		prj_run Synthesis -impl impl
		prj_run Translate -impl impl
		prj_run Map -impl impl
		prj_run PAR -impl impl
		prj_run Export -impl impl -task Bitgen
		{{get_override("script_after_export")|default("# (script_after_export placeholder)")}}
	''',
	'{{name}}.lpf': r'''
		# {{autogenerated}}
		BLOCK ASYNCPATHS;
		BLOCK RESETPATHS;
		{% for port_name, pin_name, attrs in platform.iter_port_constraints_bits() -%}
			LOCATE COMP "{{port_name}}" SITE "{{pin_name}}";
			{% if attrs -%}
			IOBUF PORT "{{port_name}}"
				{%- for key, value in attrs.items() %} {{key}}={{value}}{% endfor %};
			{% endif %}
		{% endfor %}
		{{get_override("add_preferences")|default("# (add_preferences placeholder)")}}
	''',
}

_DIAMOND_FILE_TEMPLATES_ECP5 = {
	**_DIAMOND_FILE_TEMPLATES_COMMON,
	'{{name}}.sdc': r'''
		{% for net_signal, port_signal, frequency in platform.iter_clock_constraints() -%}
			{% if port_signal is not none and net_signal not in platform._active_extrefs -%}
				create_clock -name {{port_signal.name|tcl_escape}} -period {{1000000000/frequency}} [get_ports {{port_signal.name|tcl_escape}}]
			{% else -%}
				create_clock -name {{net_signal.name|tcl_escape}} -period {{1000000000/frequency}} [get_nets {{net_signal|hierarchy("/")|tcl_escape}}]
			{% endif %}
		{% endfor %}
		{{get_override("add_constraints")|default("# (add_constraints placeholder)")}}
	''' # noqa: E501
}

_DIAMOND_FILE_TEMPLATES_MACHXO = {
	**_DIAMOND_FILE_TEMPLATES_COMMON,
	'{{name}}.tcl': r'''
		prj_project new -name {{name}} -impl impl -impl_dir {{name}}_impl \
			-dev {{platform.device}}-{{platform.speed}}{{platform.package}}{{platform.grade}} \
			-lpf {{name}}.lpf \
			-synthesis synplify
		{% for file in platform.iter_files(".v", ".sv", ".vhd", ".vhdl") -%}
			prj_src add {{file|tcl_escape}}
		{% endfor %}
		prj_src add {{name}}.v
		prj_impl option top {{name}}
		prj_src add {{name}}.sdc
		{{get_override("script_project")|default("# (script_project placeholder)")}}
		prj_project save
		prj_run Synthesis -impl impl
		prj_run Translate -impl impl
		prj_run Map -impl impl
		prj_run PAR -impl impl
		prj_run Export -impl impl -task Bitgen
		{{get_override("script_after_export")|default("# (script_after_export placeholder)")}}
	''',
	'{{name}}.sdc': r'''
		{% for net_signal, port_signal, frequency in platform.iter_clock_constraints() -%}
			{% if port_signal is not none -%}
				create_clock -name {{port_signal.name|tcl_escape}} -period {{1000000000/frequency}} [get_ports {{port_signal.name|tcl_escape}}]
			{% else -%}
				create_clock -name {{net_signal.name|tcl_escape}} -period {{1000000000/frequency}} [get_nets {{net_signal|hierarchy("/")|tcl_escape}}]
			{% endif %}
		{% endfor %}
		{{get_override("add_constraints")|default("# (add_constraints placeholder)")}}
	''' # noqa: E501
}

_RADIANT_FILE_TEMPLATES = {
	**TemplatedPlatform.build_script_templates,
	**_FILE_TEMPLATES_COMMON,
	'{{name}}.tcl': r'''
		# {{autogenerated}}
		prj_create -name {{name}} \
			-impl {{name}} \
			-dev {{platform.device}}-{{platform.speed}}{{platform.package}}{{platform.grade}} \
			-synthesis synplify
		{% for f in platform.iter_files(".v", ".sv", ".vhd", ".vhdl") -%}
			prj_add_sources {{file|tcl_quote}}
		{% endfor %}
		prj_add_source {{name}}.v
		prj_add_source {{name}}.pdc
		prj_add_source {{name}}.sdc
		prj_set_impl_opt top \"{{name}}\"
		{{get_override("script_project")|default("# (script_project placeholder)")}}
		prj_save
		prj_run_synthesis -forceOne
		prj_run_map
		prj_run_par
		prj_run_bitstream
		{{get_override("script_after_export")|default("# (script_after_export placeholder)")}}
	''',
	'{{name}}.pdc': r'''
		# {{autogenerated}}
		{% for port_name, pin_name, attrs in platform.iter_port_constraints_bits() -%}
			ldc_set_location -site {{'{'}}{{pin_name}}{{'}'}} [get_ports {{'{'}}{{port_name}}{{'}'}}]
			{% if attrs -%}
			ldc_set_port -iobuf {{'{'}}{%- for key, value in attrs.items() %} {{key}}={{value}}{% endfor %}{{'}'}} [get_ports {{'{'}}{{port_name}}{{'}'}}]
			{% endif %}
		{% endfor %}

		{{get_override("add_preferences")|default("# (add_preferences placeholder)")}}
	''',  # noqa: E501
	'{{name}}.sdc': r'''
		# {{autogenerated}}
		{% for net_signal, port_signal, frequency in platform.iter_clock_constraints() -%}
			{% if port_signal is not none -%}
				create_clock -name {{port_signal.name|tcl_quote}} -period {{1000000000/frequency}} [get_nets {{port_signal.name|tcl_quote}}]
			{% else -%}
				create_clock -name {{net_signal.name|tcl_quote}} -period {{1000000000/frequency}} [get_nets {{net_signal|hierarchy("/")|tcl_quote}}]
			{% endif %}
		{% endfor %}
	''',  # noqa: E501
}

_COMMAND_TEMPLATES_COMMON = [
	r'''
	{{invoke_tool("yosys")}}
		{{quiet("-q")}}
		{{get_override("yosys_opts")|options}}
		-l {{name}}.rpt
		{{name}}.ys
	''',
]

_TRELLIS_COMMAND_TEMPLATES_ECP5 = [
	*_COMMAND_TEMPLATES_COMMON,
	r'''
	{{invoke_tool("nextpnr-ecp5")}}
		{{quiet("--quiet")}}
		{{get_override("nextpnr_opts")|options}}
		--log {{name}}.tim
		{{platform._nextpnr_device_options[platform.device]}}
		--package {{platform._nextpnr_package_options[platform.package]|upper}}
		--speed {{platform.speed}}
		--json {{name}}.json
		--lpf {{name}}.lpf
		--textcfg {{name}}.config
	''',
	r'''
	{{invoke_tool("ecppack")}}
		{{verbose("--verbose")}}
		{{get_override("ecppack_opts")|options}}
		--input {{name}}.config
		--bit {{name}}.bit
		--svf {{name}}.svf
	'''
]

_TRELLIS_COMMAND_TEMPLATES_MACHXO = [
	*_COMMAND_TEMPLATES_COMMON,
	r'''
	{{invoke_tool("nextpnr-machxo2")}}
		{{quiet("--quiet")}}
		{{get_override("nextpnr_opts")|options}}
		--log {{name}}.tim
		--device {{platform.device}}-{{platform.speed}}{{platform.package|upper}}{{platform.grade}}
		--json {{name}}.json
		--lpf {{name}}.lpf
		--textcfg {{name}}.config
	''',
	r'''
	{{invoke_tool("ecppack")}}
		{{verbose("--verbose")}}
		{{get_override("ecppack_opts")|options}}
		--input {{name}}.config
		--bit {{name}}.bit
		--svf {{name}}.svf
	'''
]

_OXIDE_COMMAND_TEMPLATES = [
	*_COMMAND_TEMPLATES_COMMON,
	r'''
	{{invoke_tool("nextpnr-nexus")}}
		{{quiet("--quiet")}}
		{{get_override("nextpnr_opts")|options}}
		--log {{name}}.tim
		--device {{platform.device}}-{{platform.speed}}{{platform.package|upper}}{{platform.grade}}
		--json {{name}}.json
		--pdc {{name}}.pdc
		--fasm {{name}}.fasm
	''',
	r'''
	{{invoke_tool("prjoxide")}}
		{{verbose("--verbose")}}
		{{get_override("prjoxide_opts")|options}}
		pack {{name}}.fasm {{name}}.bit
	'''
]

_DIAMOND_COMMAND_TEMPLATES_COMMON = [
	r'''
	{{invoke_tool("pnmainc")}}
		{{name}}.tcl
	''',
	r'''
	{{invoke_tool("ddtcmd")}}
		-oft -bit
		-if {{name}}_impl/{{name}}_impl.bit -of {{name}}.bit
		{{get_override("ddtcmd_bit_opts")|options}}
	''',
]

_DIAMOND_COMMAND_TEMPLATES_ECP5 = [
	*_DIAMOND_COMMAND_TEMPLATES_COMMON,
	r'''
	{{invoke_tool("ddtcmd")}}
		-oft -svfsingle -revd -op "Fast Program"
		-if {{name}}_impl/{{name}}_impl.bit -of {{name}}.svf
		{{get_override("ddtcmd_svf_opts")|options}}
	'''
]

_DIAMOND_COMMAND_TEMPLATES_MACHXO = [
	*_DIAMOND_COMMAND_TEMPLATES_COMMON,
	r'''
	{{invoke_tool("ddtcmd")}}
		-oft -jed
		-dev {{platform.device}}-{{platform.speed}}{{platform.package}}{{platform.grade}}
		-if {{name}}_impl/{{name}}_impl.jed -of {{name}}.jed
		{{get_override("ddtcmd_jed_opts")|options}}
	''',
	r'''
	{{invoke_tool("ddtcmd")}}
		-oft -svfsingle -revd -op "FLASH Erase,Program,Verify"
		-if {{name}}_impl/{{name}}_impl.jed -of {{name}}_flash.svf
		{{get_override("ddtcmd_flash_svf_opts")|options}}
	''',
	r'''
	{{invoke_tool("ddtcmd")}}
		-oft -svfsingle -revd -op "SRAM Fast Program"
		-if {{name}}_impl/{{name}}_impl.bit -of {{name}}_sram.svf
		{{get_override("ddtcmd_sram_svf_opts")|options}}
	''',
]

_RADIANT_COMMAND_TEMPLATES = [
	r'''
	{{invoke_tool("radiantc")}}
		{{name}}.tcl
	'''
]

class LatticePlatform(TemplatedPlatform):

	_nextpnr_device_options = {
		'LFE5U-12F':    '--12k',
		'LFE5U-25F':    '--25k',
		'LFE5U-45F':    '--45k',
		'LFE5U-85F':    '--85k',
		'LFE5UM-25F':   '--um-25k',
		'LFE5UM-45F':   '--um-45k',
		'LFE5UM-85F':   '--um-85k',
		'LFE5UM5G-25F': '--um5g-25k',
		'LFE5UM5G-45F': '--um5g-45k',
		'LFE5UM5G-85F': '--um5g-85k',
	}

	_nextpnr_package_options = {
		'BG256': 'caBGA256',
		'MG285': 'csfBGA285',
		'BG381': 'caBGA381',
		'BG554': 'caBGA554',
		'BG756': 'caBGA756',
	}

	@property
	@abstractmethod
	def device(self) -> str:
		raise NotImplementedError('Platform must implement this property')

	@property
	@abstractmethod
	def package(self) -> str:
		raise NotImplementedError('Platform must implement this property')

	@property
	@abstractmethod
	def speed(self) -> str:
		raise NotImplementedError('Platform must implement this property')

	grade: Literal['C', 'I'] = 'C'

	family: Literal['ecp5', 'machxo2', 'machxo3', 'nexus'] | None = None

	# These numbers were extracted from
	# "MachXO2 sysCLOCK PLL Design and Usage Guide"
	_supported_osch_freqs = [
		2.08, 2.15, 2.22, 2.29, 2.38, 2.46, 2.56, 2.66, 2.77, 2.89,
		3.02, 3.17, 3.33, 3.50, 3.69, 3.91, 4.16, 4.29, 4.43, 4.59,
		4.75, 4.93, 5.12, 5.32, 5.54, 5.78, 6.05, 6.33, 6.65, 7.00,
		7.39, 7.82, 8.31, 8.58, 8.87, 9.17, 9.50, 9.85, 10.23, 10.64,
		11.08, 11.57, 12.09, 12.67, 13.30, 14.00, 14.78, 15.65, 15.65, 16.63,
		17.73, 19.00, 20.46, 22.17, 24.18, 26.60, 29.56, 33.25, 38.00, 44.33,
		53.20, 66.50, 88.67, 133.00
	]

	@property
	def default_clk_constraint(self) -> Clock:
		match self.default_clk:
			case 'OSCA':
				return Clock(int(450e6 / self.osca_div))
			case 'OSCG':
				return Clock(310e6 / self.oscg_div)
			case 'OSCH':
				if self.osch_frequency not in self._supported_osch_freqs:
					raise ValueError(
						f'Invalid OSCH frequency \'{self.osch_frequency}\','
						f' must be one of {", ".join(self._supported_osch_freqs)}'
					)
				return Clock(int(self.osch_frequency * 1e6))
			case _:
				return super().default_clk_constraint

	def create_missing_domain(self, name: str) -> Module:
		if name == 'sync' and self.default_clk is not None:
			m = Module()

			clk = Signal()

			match self.default_clk:
				case 'OSCA':
					if self.osca_div > 256 or self.osca_div < 2:
						raise ValueError(f'OSCA divisor must be between 2 and 256, not {self.osca_div}')

					m.submodules += [
						Instance(
							'OSCA',
							p_HF_CLK_DIV = f'{self.osca_div - 1}',
							i_HFOUTEN = Const(1),
							i_HFSDSCEN = Const(0),
							o_HFCLKOUT = clk
						)
					]
				case 'OSCG':
					if not isinstance(self.oscg_div, int) or self.oscg_div < 2 or self.oscg_div > 128:
						raise ValueError(
							f'OSCG divider (oscg_div) must be an integer between 2 and 128, not {self.oscg_div!r}'
						)

					m.submodules += [
						Instance('OSCG', p_DIV = self.oscg_div, o_OSC = clk)
					]
				case 'OSCH':
					if self.osch_frequency not in self._supported_osch_freqs:
						raise ValueError(
							f'Frequency {self.osch_frequency!r} is not valid for OSCH clock. Valid frequencies are '
							f'{self._supported_osch_freqs!r}'
						)

					m.submodules += [
						Instance(
							'OSCH',
							p_NOM_FREQ = f'{float(self.osch_frequency):.2f}',
							i_STDBY = Const(0),
							o_OSC = clk,
							o_SEDSTDBY = Signal()
						)
					]
				case _:
					clk = self.request(self.default_clk).i

			if self.default_rst is not None:
				rst = self.request(self.default_rst).i
			else:
				rst = Const(0)

			gsr0 = Signal()
			gsr1 = Signal()

			match self.family:
				case 'ecp5' | 'machxo2' | 'machxo3':
					m.submodules += [
						Instance(
							'FD1S3AX',
							p_GSR = 'DISABLED',
							i_CK = clk,
							i_D = ~rst,
							o_Q = gsr0
						),
						Instance(
							'FD1S3AX',
							p_GSR = 'DISABLED',
							i_CK = clk,
							i_D = gsr0,
							o_Q = gsr1
						),

						# Although we already synchronize the reset input to user clock, SGSR has dedicated
						# clock routing to the center of the FPGA; use that just in case it turns out to be
						# more reliable. (None of this is documented.)
						Instance('SGSR', i_CLK = clk, i_GSR = gsr1),
					]
				case 'nexus':
					m.submodules += [
						Instance(
							'FD1P3BX',
							p_GSR = 'DISABLED',
							i_CK = clk,
							i_SP = Const(1),
							i_PD = Const(0),
							i_D = ~rst,
							o_Q = gsr0
						),
						Instance(
							'FD1P3BX',
							p_GSR =
							'DISABLED',
							i_CK = clk,
							i_SP = Const(1),
							i_PD = Const(0),
							i_D = gsr0,
							o_Q = gsr1
						),
						Instance('GSR', p_SYNCMODE = 'SYNC', i_CLK = clk, i_GSR_N = gsr1)
					]
				case _:
					raise ValueError('Unknown')

			m.domains += [
				ClockDomain('sync', reset_less = True)
			]
			m.d.comb += [
				ClockSignal('sync').eq(clk)
			]

			return m
		else:
			return None
